proto < ./hello.proto
GRPC grpcb.in:9000/hello.HelloService/BidiHello
{
  "greeting": "first"
}

// Send messages to the bidirectional stream
{{@streaming
  async function writeStream(){
    await sleep(1000);
    grpcStream.write({
      greeting: 'second',
    });
    await sleep(1000);
    grpcStream.write({
      greeting: 'third',
    });
  }
  exports.waitPromise = writeStream();
}}

// This is just a debug output example
{{+after
  console.info(`gRPC response status code is: ${response.statusCode}`);
  console.info(`gRPC response is: ${response.body}`);
}}

// Test script 
{{+after
  const { equal } = require('assert');
  
// Check for the gRPC status success code
// https://grpc.github.io/grpc/core/md_doc_statuscodes.html
  test('gRPC status code is 0', () => {
    equal(response.statusCode, 0);
  });

// Check for the stream response messages equal
  test('gRPC stream response messages are as expected', () => {
    const responseMessagesObj = JSON.parse(response.body); 
    equal(responseMessagesObj[0].reply,'hello first');
    equal(responseMessagesObj[1].reply,'hello noname');
    equal(responseMessagesObj[2].reply,'hello third');	
});
}}
